diff --git a/src/artery/application/CaObject.cc b/src/artery/application/CaObject.cc
index 923f7e7b..2399c5d9 100644
--- a/src/artery/application/CaObject.cc
+++ b/src/artery/application/CaObject.cc
@@ -68,7 +68,7 @@ protected:
     void receiveSignal(cResultFilter* prev, simtime_t_cref t, cObject* object, cObject* details) override
     {
         if (auto cam = dynamic_cast<CaObject*>(object)) {
-            const auto id = cam->asn1()->header.stationID;
+            const auto id = cam->asn1()->header.stationId;
             fire(this, t, id, details);
         }
     }
diff --git a/src/artery/application/CaService.cc b/src/artery/application/CaService.cc
index 6d9a1fb7..7ead07b8 100644
--- a/src/artery/application/CaService.cc
+++ b/src/artery/application/CaService.cc
@@ -20,6 +20,15 @@
 #include <vanetza/facilities/cam_functions.hpp>
 #include <chrono>
 
+#define SpeedValue_oneCentimeterPerSec 1
+#define Longitude_oneMicrodegreeEast 10
+#define Latitude_oneMicrodegreeNorth 10
+#define HeadingConfidence_equalOrWithinOneDegree 10
+#define SpeedConfidence_equalOrWithinOneCentimeterPerSec 1
+#define LongitudinalAccelerationValue_pointOneMeterPerSecSquaredForward 1
+#define YawRateValue_degSec_000_01ToLeft 1
+#define PathDeltaTime_tenMilliSecondsInPast 1
+
 namespace artery
 {
 
@@ -211,23 +220,23 @@ vanetza::asn1::Cam createCooperativeAwarenessMessage(const VehicleDataProvider&
 
 	ItsPduHeader_t& header = (*message).header;
 	header.protocolVersion = 2;
-	header.messageID = ItsPduHeader__messageID_cam;
-	header.stationID = vdp.station_id();
+	header.messageId = MessageId_cam;
+	header.stationId = vdp.station_id();
 
-	CoopAwareness_t& cam = (*message).cam;
+	CamPayload_t& cam = (*message).cam;
 	cam.generationDeltaTime = genDeltaTime * GenerationDeltaTime_oneMilliSec;
 	BasicContainer_t& basic = cam.camParameters.basicContainer;
 	HighFrequencyContainer_t& hfc = cam.camParameters.highFrequencyContainer;
 
-	basic.stationType = StationType_passengerCar;
+	basic.stationType = TrafficParticipantType_passengerCar;
 	basic.referencePosition.altitude.altitudeValue = AltitudeValue_unavailable;
 	basic.referencePosition.altitude.altitudeConfidence = AltitudeConfidence_unavailable;
 	basic.referencePosition.longitude = round(vdp.longitude(), microdegree) * Longitude_oneMicrodegreeEast;
 	basic.referencePosition.latitude = round(vdp.latitude(), microdegree) * Latitude_oneMicrodegreeNorth;
-	basic.referencePosition.positionConfidenceEllipse.semiMajorOrientation = HeadingValue_unavailable;
-	basic.referencePosition.positionConfidenceEllipse.semiMajorConfidence =
+	basic.referencePosition.positionConfidenceEllipse.semiMajorAxisOrientation = HeadingValue_unavailable;
+	basic.referencePosition.positionConfidenceEllipse.semiMajorAxisLength =
 			SemiAxisLength_unavailable;
-	basic.referencePosition.positionConfidenceEllipse.semiMinorConfidence =
+	basic.referencePosition.positionConfidenceEllipse.semiMinorAxisLength =
 			SemiAxisLength_unavailable;
 
 	hfc.present = HighFrequencyContainer_PR_basicVehicleContainerHighFrequency;
@@ -241,11 +250,11 @@ vanetza::asn1::Cam createCooperativeAwarenessMessage(const VehicleDataProvider&
 	const double lonAccelValue = vdp.acceleration() / vanetza::units::si::meter_per_second_squared;
 	// extreme speed changes can occur when SUMO swaps vehicles between lanes (speed is swapped as well)
 	if (lonAccelValue >= -160.0 && lonAccelValue <= 161.0) {
-		bvc.longitudinalAcceleration.longitudinalAccelerationValue = lonAccelValue * LongitudinalAccelerationValue_pointOneMeterPerSecSquaredForward;
+		bvc.longitudinalAcceleration.value = lonAccelValue * LongitudinalAccelerationValue_pointOneMeterPerSecSquaredForward;
 	} else {
-		bvc.longitudinalAcceleration.longitudinalAccelerationValue = LongitudinalAccelerationValue_unavailable;
+		bvc.longitudinalAcceleration.value = AccelerationValue_unavailable;
 	}
-	bvc.longitudinalAcceleration.longitudinalAccelerationConfidence = AccelerationConfidence_unavailable;
+	bvc.longitudinalAcceleration.confidence = AccelerationConfidence_unavailable;
 	bvc.curvature.curvatureValue = abs(vdp.curvature() / vanetza::units::reciprocal_metre) * 10000.0;
 	if (bvc.curvature.curvatureValue >= 1023) {
 		bvc.curvature.curvatureValue = 1023;
diff --git a/src/artery/application/DenService.cc b/src/artery/application/DenService.cc
index e66cad0c..98f2de01 100644
--- a/src/artery/application/DenService.cc
+++ b/src/artery/application/DenService.cc
@@ -84,9 +84,9 @@ void DenService::indicate(const vanetza::btp::DataIndication& indication, std::u
 {
     Asn1PacketVisitor<vanetza::asn1::Denm> visitor;
     const vanetza::asn1::Denm* denm = boost::apply_visitor(visitor, *packet);
-    const auto egoStationID = getFacilities().get_const<VehicleDataProvider>().station_id();
+    const auto egoStationId = getFacilities().get_const<VehicleDataProvider>().station_id();
 
-    if (denm && (*denm)->header.stationID != egoStationID) {
+    if (denm && (*denm)->header.stationId != egoStationId) {
         DenmObject obj = visitor.shared_wrapper;
         mMemory->received(obj);
         emit(denmReceivedSignal, &obj);
@@ -106,10 +106,10 @@ void DenService::trigger()
     }
 }
 
-ActionID_t DenService::requestActionID()
+ActionId_t DenService::requestActionID()
 {
-    ActionID_t id;
-    id.originatingStationID = getFacilities().get_const<VehicleDataProvider>().station_id();
+    ActionId_t id;
+    id.originatingStationId = getFacilities().get_const<VehicleDataProvider>().station_id();
     id.sequenceNumber = ++mSequenceNumber;
     return id;
 }
diff --git a/src/artery/application/DenService.h b/src/artery/application/DenService.h
index 8f0f17cb..bd6ef560 100644
--- a/src/artery/application/DenService.h
+++ b/src/artery/application/DenService.h
@@ -35,7 +35,7 @@ class DenService : public ItsG5BaseService
         const Timer* getTimer() const;
         std::shared_ptr<const artery::den::Memory> getMemory() const;
 
-        ActionID_t requestActionID();
+        ActionId_t requestActionID();
         void sendDenm(vanetza::asn1::Denm&&, vanetza::btp::DataRequestB&);
 
     private:
diff --git a/src/artery/application/DenmObject.cc b/src/artery/application/DenmObject.cc
index 8b3f4533..e4b8c20a 100644
--- a/src/artery/application/DenmObject.cc
+++ b/src/artery/application/DenmObject.cc
@@ -36,7 +36,7 @@ boost::optional<den::CauseCode> DenmObject::situation_cause_code() const
     boost::optional<den::CauseCode> cause_code;
     const SituationContainer* situation = asn1()->denm.situation;
     if (situation) {
-        cause_code = den::convert(situation->eventType.causeCode);
+        cause_code = den::convert(situation->eventType.ccAndScc.present);
     }
     return cause_code;
 }
@@ -73,9 +73,9 @@ protected:
         if (auto denm = dynamic_cast<DenmObject*>(object)) {
             // 16 bit sequence number + 32 bit station id
             static_assert(sizeof(unsigned long) >= 6, "unsigned long cannot represent ActionID");
-            unsigned long action_id = denm->asn1()->denm.management.actionID.originatingStationID & 0xFFFFFFFFul;
+            unsigned long action_id = denm->asn1()->denm.management.actionId.originatingStationId & 0xFFFFFFFFul;
             action_id <<= 4;
-            action_id |= denm->asn1()->denm.management.actionID.sequenceNumber & 0xFFFFul;
+            action_id |= denm->asn1()->denm.management.actionId.sequenceNumber & 0xFFFFul;
             fire(this, t, action_id, details);
         }
     }
@@ -92,7 +92,7 @@ protected:
         if (auto denm = dynamic_cast<DenmObject*>(object)) {
             const SituationContainer_t* situation = denm->asn1()->denm.situation;
             if (situation) {
-                long causeCode = situation->eventType.causeCode;
+                long causeCode = situation->eventType.ccAndScc.present;
                 fire(this, t, causeCode, details);
             }
         }
diff --git a/src/artery/application/LocalDynamicMap.cc b/src/artery/application/LocalDynamicMap.cc
index f8024c84..183ddbb9 100644
--- a/src/artery/application/LocalDynamicMap.cc
+++ b/src/artery/application/LocalDynamicMap.cc
@@ -28,11 +28,11 @@ void LocalDynamicMap::updateAwareness(const CaObject& obj)
     }
 
     AwarenessEntry entry(obj, expiry);
-    auto found = mCaMessages.find(msg->header.stationID);
+    auto found = mCaMessages.find(msg->header.stationId);
     if (found != mCaMessages.end()) {
         found->second = std::move(entry);
     } else {
-        mCaMessages.emplace(msg->header.stationID, std::move(entry));
+        mCaMessages.emplace(msg->header.stationId, std::move(entry));
     }
 }
 
diff --git a/src/artery/application/RsuCaService.cc b/src/artery/application/RsuCaService.cc
index 0e58ce86..b3a76b7a 100644
--- a/src/artery/application/RsuCaService.cc
+++ b/src/artery/application/RsuCaService.cc
@@ -17,6 +17,15 @@
 #include <vanetza/btp/ports.hpp>
 #include <cmath>
 
+#define SpeedValue_oneCentimeterPerSec 1
+#define Longitude_oneMicrodegreeEast 10
+#define Latitude_oneMicrodegreeNorth 10
+#define HeadingConfidence_equalOrWithinOneDegree 10
+#define SpeedConfidence_equalOrWithinOneCentimeterPerSec 1
+#define LongitudinalAccelerationValue_pointOneMeterPerSecSquaredForward 1
+#define YawRateValue_degSec_000_01ToLeft 1
+#define PathDeltaTime_tenMilliSecondsInPast 1
+
 namespace artery
 {
 
@@ -128,25 +137,25 @@ vanetza::asn1::Cam RsuCaService::createMessage() const
     vanetza::asn1::Cam message;
     ItsPduHeader_t& header = (*message).header;
     header.protocolVersion = 2;
-    header.messageID = ItsPduHeader__messageID_cam;
-    header.stationID = mIdentity->application;
+    header.messageId = MessageId_cam;
+    header.stationId = mIdentity->application;
 
-    CoopAwareness_t& cam = (*message).cam;
+    CamPayload& cam = (*message).cam;
     const uint16_t genDeltaTime = countTaiMilliseconds(mTimer->getCurrentTime());
     cam.generationDeltaTime = genDeltaTime * GenerationDeltaTime_oneMilliSec;
     BasicContainer_t& basic = cam.camParameters.basicContainer;
     HighFrequencyContainer_t& hfc = cam.camParameters.highFrequencyContainer;
 
-    basic.stationType = StationType_roadSideUnit;
+    basic.stationType = TrafficParticipantType_roadSideUnit;
     basic.referencePosition.altitude.altitudeValue = AltitudeValue_unavailable;
     basic.referencePosition.altitude.altitudeConfidence = AltitudeConfidence_unavailable;
     const double longitude = mGeoPosition->longitude / vanetza::units::degree;
     basic.referencePosition.longitude = std::round(longitude * 1e6 * Longitude_oneMicrodegreeEast);
     const double latitude = mGeoPosition->latitude / vanetza::units::degree;
     basic.referencePosition.latitude = std::round(latitude * 1e6 * Latitude_oneMicrodegreeNorth);
-    basic.referencePosition.positionConfidenceEllipse.semiMajorOrientation = HeadingValue_unavailable;
-    basic.referencePosition.positionConfidenceEllipse.semiMajorConfidence = SemiAxisLength_unavailable;
-    basic.referencePosition.positionConfidenceEllipse.semiMinorConfidence = SemiAxisLength_unavailable;
+    basic.referencePosition.positionConfidenceEllipse.semiMajorAxisOrientation = HeadingValue_unavailable;
+    basic.referencePosition.positionConfidenceEllipse.semiMajorAxisLength = SemiAxisLength_unavailable;
+    basic.referencePosition.positionConfidenceEllipse.semiMinorAxisLength = SemiAxisLength_unavailable;
 
     hfc.present = HighFrequencyContainer_PR_rsuContainerHighFrequency;
     RSUContainerHighFrequency& rchf = hfc.choice.rsuContainerHighFrequency;
@@ -162,8 +171,8 @@ vanetza::asn1::Cam RsuCaService::createMessage() const
                 *asn1->protectedZoneRadius = zone.radius_m;
             }
             if (zone.id) {
-                asn1->protectedZoneID = vanetza::asn1::allocate<ProtectedZoneID_t>();
-                *asn1->protectedZoneID = *zone.id;
+                asn1->protectedZoneId = vanetza::asn1::allocate<ProtectedZoneId_t>();
+                *asn1->protectedZoneId = *zone.id;
             }
             ASN_SEQUENCE_ADD(rchf.protectedCommunicationZonesRSU, asn1);
         }
diff --git a/src/artery/application/RsuCaService.h b/src/artery/application/RsuCaService.h
index 72277acd..60bf356d 100644
--- a/src/artery/application/RsuCaService.h
+++ b/src/artery/application/RsuCaService.h
@@ -32,7 +32,7 @@ class RsuCaService : public ItsG5BaseService
 
         struct ProtectedCommunicationZone
         {
-            boost::optional<ProtectedZoneID_t> id;
+            boost::optional<ProtectedZoneId_t> id;
             ProtectedZoneType_t type = ProtectedZoneType_permanentCenDsrcTolling;
             double latitude_deg = 0.0;
             double longitude_deg = 0.0;
diff --git a/src/artery/application/den/CauseCode.h b/src/artery/application/den/CauseCode.h
index 7e91df2e..2954dc5b 100644
--- a/src/artery/application/den/CauseCode.h
+++ b/src/artery/application/den/CauseCode.h
@@ -36,7 +36,7 @@ enum class CauseCode
     DangerousSituation = 99
 };
 
-constexpr CauseCode convert(const CauseCodeType_t& type)
+constexpr CauseCode convert(const CauseCodeChoice_PR& type)
 {
     return static_cast<CauseCode>(type);
 }
diff --git a/src/artery/application/den/EmergencyBrakeLight.cc b/src/artery/application/den/EmergencyBrakeLight.cc
index d1efb244..a25ca2ac 100644
--- a/src/artery/application/den/EmergencyBrakeLight.cc
+++ b/src/artery/application/den/EmergencyBrakeLight.cc
@@ -70,18 +70,18 @@ bool EmergencyBrakeLight::checkEgoDeceleration() const
 vanetza::asn1::Denm EmergencyBrakeLight::createMessage()
 {
     auto msg = createMessageSkeleton();
-    msg->denm.management.relevanceDistance = vanetza::asn1::allocate<RelevanceDistance_t>();
-    *msg->denm.management.relevanceDistance = RelevanceDistance_lessThan500m;
-    msg->denm.management.relevanceTrafficDirection = vanetza::asn1::allocate<RelevanceTrafficDirection_t>();
-    *msg->denm.management.relevanceTrafficDirection = RelevanceTrafficDirection_allTrafficDirections;
-    msg->denm.management.validityDuration = vanetza::asn1::allocate<ValidityDuration_t>();
+    msg->denm.management.awarenessDistance = vanetza::asn1::allocate<StandardLength3b_t>();
+    *msg->denm.management.awarenessDistance = StandardLength3b_lessThan500m;
+    msg->denm.management.awarenessTrafficDirection = vanetza::asn1::allocate<TrafficDirection_t>();
+    *msg->denm.management.awarenessTrafficDirection = TrafficDirection_allTrafficDirections;
+    msg->denm.management.validityDuration = vanetza::asn1::allocate<DeltaTimeSecond_t>();
     *msg->denm.management.validityDuration = 2;
-    msg->denm.management.stationType = StationType_unknown; // TODO retrieve type from SUMO
+    msg->denm.management.stationType = TrafficParticipantType_unknown; // TODO retrieve type from SUMO
 
     msg->denm.situation = vanetza::asn1::allocate<SituationContainer_t>();
     msg->denm.situation->informationQuality = 1;
-    msg->denm.situation->eventType.causeCode = CauseCodeType_dangerousSituation;
-    msg->denm.situation->eventType.subCauseCode = DangerousSituationSubCauseCode_emergencyElectronicBrakeEngaged;
+    msg->denm.situation->eventType.ccAndScc.present = CauseCodeChoice_PR_dangerousSituation99;
+    msg->denm.situation->eventType.ccAndScc.choice.dangerousSituation99 = DangerousSituationSubCauseCode_emergencyElectronicBrakeEngaged;
 
     // TODO set road type in Location container
     // TODO set lane position in Alacarte container
diff --git a/src/artery/application/den/ImpactReductionUseCase.cc b/src/artery/application/den/ImpactReductionUseCase.cc
index e72cd09b..2a88dac9 100644
--- a/src/artery/application/den/ImpactReductionUseCase.cc
+++ b/src/artery/application/den/ImpactReductionUseCase.cc
@@ -56,18 +56,18 @@ void ImpactReductionContainerExchange::handleStoryboardTrigger(const StoryboardS
 vanetza::asn1::Denm ImpactReductionContainerExchange::createMessage(RequestResponseIndication_t ind)
 {
     auto msg = createMessageSkeleton();
-    msg->denm.management.relevanceDistance = vanetza::asn1::allocate<RelevanceDistance_t>();
-    *msg->denm.management.relevanceDistance = RelevanceDistance_lessThan100m;
-    msg->denm.management.relevanceTrafficDirection = vanetza::asn1::allocate<RelevanceTrafficDirection_t>();
-    *msg->denm.management.relevanceTrafficDirection = RelevanceTrafficDirection_allTrafficDirections;
-    msg->denm.management.validityDuration = vanetza::asn1::allocate<ValidityDuration_t>();
+    msg->denm.management.awarenessDistance = vanetza::asn1::allocate<StandardLength3b_t>();
+    *msg->denm.management.awarenessDistance = StandardLength3b_lessThan100m;
+    msg->denm.management.awarenessTrafficDirection = vanetza::asn1::allocate<TrafficDirection_t>();
+    *msg->denm.management.awarenessTrafficDirection = TrafficDirection_allTrafficDirections;
+    msg->denm.management.validityDuration = vanetza::asn1::allocate<DeltaTimeSecond_t>();
     *msg->denm.management.validityDuration = 2;
-    msg->denm.management.stationType = StationType_unknown; // TODO retrieve type from SUMO
+    msg->denm.management.stationType = TrafficParticipantType_unknown; // TODO retrieve type from SUMO
 
     msg->denm.situation = vanetza::asn1::allocate<SituationContainer_t>();
     msg->denm.situation->informationQuality = 1;
-    msg->denm.situation->eventType.causeCode = CauseCodeType_collisionRisk;
-    msg->denm.situation->eventType.subCauseCode = 0;
+    msg->denm.situation->eventType.ccAndScc.present = CauseCodeChoice_PR_collisionRisk97;
+    msg->denm.situation->eventType.ccAndScc.choice.collisionRisk97 = CollisionRiskSubCauseCode_unavailable;
 
     msg->denm.alacarte = vanetza::asn1::allocate<AlacarteContainer_t>();
     msg->denm.alacarte->impactReduction = vanetza::asn1::allocate<ImpactReductionContainer_t>();
diff --git a/src/artery/application/den/Memory.cc b/src/artery/application/den/Memory.cc
index 7247ce18..2216fdcc 100644
--- a/src/artery/application/den/Memory.cc
+++ b/src/artery/application/den/Memory.cc
@@ -8,6 +8,8 @@
 #include "artery/application/Timer.h"
 #include <omnetpp/csimulation.h>
 
+#define DeltaTimeSecond_oneSecondAfterDetection 1
+
 using omnetpp::SimTime;
 
 namespace artery
@@ -15,8 +17,8 @@ namespace artery
 namespace den
 {
 
-ActionID::ActionID(const ActionID_t& asn1) :
-    station_id(asn1.originatingStationID),
+ActionID::ActionID(const ActionId_t& asn1) :
+    station_id(asn1.originatingStationId),
     sequence_number(asn1.sequenceNumber)
 {
 }
@@ -58,7 +60,7 @@ Reception::Reception(const DenmObject& object) :
 vanetza::Clock::time_point Reception::expiry() const
 {
     unsigned long detectionTimeRaw = 0;
-    const ManagementContainer_t& denmManagement = (*message)->denm.management;
+    const DENM_PDU_Description_ManagementContainer& denmManagement = (*message)->denm.management;
     if (asn_INTEGER2ulong(&denmManagement.detectionTime, &detectionTimeRaw) != 0) {
         throw std::range_error("DENM detectionTime cannot be converted to unsigned long");
     }
@@ -66,7 +68,7 @@ vanetza::Clock::time_point Reception::expiry() const
 
     vanetza::Clock::duration validityDuration = std::chrono::seconds(600);
     if (denmManagement.validityDuration) {
-        validityDuration = std::chrono::seconds(*denmManagement.validityDuration / ValidityDuration_oneSecondAfterDetection);
+        validityDuration = std::chrono::seconds(*denmManagement.validityDuration / DeltaTimeSecond_oneSecondAfterDetection);
     }
 
     return detectionTime + validityDuration;
@@ -74,14 +76,14 @@ vanetza::Clock::time_point Reception::expiry() const
 
 ActionID Reception::action_id() const
 {
-    return ActionID((*message)->denm.management.actionID);
+    return ActionID((*message)->denm.management.actionId);
 }
 
 CauseCode Reception::cause_code() const
 {
     const SituationContainer* situation = (*message)->denm.situation;
     if (situation) {
-        return convert(situation->eventType.causeCode);
+        return convert(situation->eventType.ccAndScc.present);
     } else {
         return static_cast<CauseCode>(0);
     }
@@ -95,14 +97,14 @@ Memory::Memory(const Timer& timer) :
 void Memory::received(const DenmObject& denm)
 {
     // TODO handle termination DENMs
-    ActionID action_id { denm.asn1()->denm.management.actionID };
+    ActionID action_id { denm.asn1()->denm.management.actionId };
     auto& idx_action_id = m_container.get<by_action_id>();
     auto found = idx_action_id.find(action_id);
     if (found == idx_action_id.end()) {
         m_container.insert(den::Reception {denm});
     } else {
-        const ManagementContainer_t& stored = (*found->message)->denm.management;
-        const ManagementContainer_t& received = denm.asn1()->denm.management;
+        const DENM_PDU_Description_ManagementContainer& stored = (*found->message)->denm.management;
+        const DENM_PDU_Description_ManagementContainer& received = denm.asn1()->denm.management;
         if (stored.referenceTime < received.referenceTime) {
             idx_action_id.replace(found, den::Reception {denm});
         }
diff --git a/src/artery/application/den/Memory.h b/src/artery/application/den/Memory.h
index 5d7fa026..a8ed7944 100644
--- a/src/artery/application/den/Memory.h
+++ b/src/artery/application/den/Memory.h
@@ -27,7 +27,7 @@ namespace den
 
 struct ActionID
 {
-    ActionID(const ActionID_t&);
+    ActionID(const ActionId_t&);
 
     uint32_t station_id;
     uint16_t sequence_number;
diff --git a/src/artery/application/den/TractionLoss.cc b/src/artery/application/den/TractionLoss.cc
index 14ad72fd..177aef9d 100644
--- a/src/artery/application/den/TractionLoss.cc
+++ b/src/artery/application/den/TractionLoss.cc
@@ -42,18 +42,18 @@ void TractionLoss::check()
 vanetza::asn1::Denm TractionLoss::createMessage()
 {
     auto msg = createMessageSkeleton();
-    msg->denm.management.relevanceDistance = vanetza::asn1::allocate<RelevanceDistance_t>();
-    *msg->denm.management.relevanceDistance = RelevanceDistance_lessThan100m;
-    msg->denm.management.relevanceTrafficDirection = vanetza::asn1::allocate<RelevanceTrafficDirection_t>();
-    *msg->denm.management.relevanceTrafficDirection = RelevanceTrafficDirection_allTrafficDirections;
-    msg->denm.management.validityDuration = vanetza::asn1::allocate<ValidityDuration_t>();
+    msg->denm.management.awarenessDistance = vanetza::asn1::allocate<StandardLength3b_t>();
+    *msg->denm.management.awarenessDistance = StandardLength3b_lessThan100m;
+    msg->denm.management.awarenessTrafficDirection = vanetza::asn1::allocate<TrafficDirection_t>();
+    *msg->denm.management.awarenessTrafficDirection = TrafficDirection_allTrafficDirections;
+    msg->denm.management.validityDuration = vanetza::asn1::allocate<DeltaTimeSecond_t>();
     *msg->denm.management.validityDuration = 600;
-    msg->denm.management.stationType = StationType_unknown; // TODO retrieve type from SUMO
+    msg->denm.management.stationType = TrafficParticipantType_unknown; // TODO retrieve type from SUMO
 
     msg->denm.situation = vanetza::asn1::allocate<SituationContainer_t>();
     msg->denm.situation->informationQuality = 0;
-    msg->denm.situation->eventType.causeCode = CauseCodeType_adverseWeatherCondition_Adhesion;
-    msg->denm.situation->eventType.subCauseCode = 0;
+    msg->denm.situation->eventType.ccAndScc.present = CauseCodeChoice_PR_adverseWeatherCondition_Adhesion6;
+    msg->denm.situation->eventType.ccAndScc.choice.adverseWeatherCondition_Adhesion6 = AdverseWeatherCondition_AdhesionSubCauseCode_unavailable;
     // TODO: add position traces
     return msg;
 }
diff --git a/src/artery/application/den/TrafficJamUseCase.cc b/src/artery/application/den/TrafficJamUseCase.cc
index 3ec29fdc..9687f3a1 100644
--- a/src/artery/application/den/TrafficJamUseCase.cc
+++ b/src/artery/application/den/TrafficJamUseCase.cc
@@ -21,6 +21,8 @@
 #include <algorithm>
 #include <numeric>
 
+#define SpeedValue_oneCentimeterPerSec 1
+
 static const auto hour = 3600.0 * boost::units::si::seconds;
 static const auto km_per_hour = boost::units::si::kilo * boost::units::si::meter / hour;
 
@@ -124,18 +126,18 @@ bool TrafficJamEndOfQueue::checkJamAheadReceived() const
 vanetza::asn1::Denm TrafficJamEndOfQueue::createMessage()
 {
     auto msg = createMessageSkeleton();
-    msg->denm.management.relevanceDistance = vanetza::asn1::allocate<RelevanceDistance_t>();
-    *msg->denm.management.relevanceDistance = RelevanceDistance_lessThan1000m;
-    msg->denm.management.relevanceTrafficDirection = vanetza::asn1::allocate<RelevanceTrafficDirection_t>();
-    *msg->denm.management.relevanceTrafficDirection = RelevanceTrafficDirection_upstreamTraffic;
-    msg->denm.management.validityDuration = vanetza::asn1::allocate<ValidityDuration_t>();
+    msg->denm.management.awarenessDistance = vanetza::asn1::allocate<StandardLength3b_t>();
+    *msg->denm.management.awarenessDistance = StandardLength3b_lessThan1000m;
+    msg->denm.management.awarenessTrafficDirection = vanetza::asn1::allocate<TrafficDirection_t>();
+    *msg->denm.management.awarenessTrafficDirection = TrafficDirection_sameAsReferenceDirection_upstreamOfReferencePosition;
+    msg->denm.management.validityDuration = vanetza::asn1::allocate<DeltaTimeSecond_t>();
     *msg->denm.management.validityDuration = 20;
-    msg->denm.management.stationType = StationType_unknown; // TODO retrieve type from SUMO
+    msg->denm.management.stationType = TrafficParticipantType_unknown; // TODO retrieve type from SUMO
 
     msg->denm.situation = vanetza::asn1::allocate<SituationContainer_t>();
     msg->denm.situation->informationQuality = 1;
-    msg->denm.situation->eventType.causeCode = CauseCodeType_dangerousEndOfQueue;
-    msg->denm.situation->eventType.subCauseCode = 0;
+    msg->denm.situation->eventType.ccAndScc.present = CauseCodeChoice_PR_dangerousEndOfQueue27;
+    msg->denm.situation->eventType.ccAndScc.choice.dangerousEndOfQueue27 = DangerousEndOfQueueSubCauseCode_unavailable;
 
     // TODO set road type in Location container
     // TODO set lane position in Alacarte container
@@ -288,18 +290,18 @@ bool TrafficJamAhead::checkSlowVehiclesAheadByV2X() const
 vanetza::asn1::Denm TrafficJamAhead::createMessage()
 {
     auto msg = createMessageSkeleton();
-    msg->denm.management.relevanceDistance = vanetza::asn1::allocate<RelevanceDistance_t>();
-    *msg->denm.management.relevanceDistance = RelevanceDistance_lessThan1000m;
-    msg->denm.management.relevanceTrafficDirection = vanetza::asn1::allocate<RelevanceTrafficDirection_t>();
-    *msg->denm.management.relevanceTrafficDirection = RelevanceTrafficDirection_upstreamTraffic;
-    msg->denm.management.validityDuration = vanetza::asn1::allocate<ValidityDuration_t>();
+    msg->denm.management.awarenessDistance = vanetza::asn1::allocate<StandardLength3b_t>();
+    *msg->denm.management.awarenessDistance = StandardLength3b_lessThan1000m;
+    msg->denm.management.awarenessTrafficDirection = vanetza::asn1::allocate<TrafficDirection_t>();
+    *msg->denm.management.awarenessTrafficDirection = TrafficDirection_sameAsReferenceDirection_upstreamOfReferencePosition;
+    msg->denm.management.validityDuration = vanetza::asn1::allocate<DeltaTimeSecond_t>();
     *msg->denm.management.validityDuration = 60;
-    msg->denm.management.stationType = StationType_unknown; // TODO retrieve type from SUMO
+    msg->denm.management.stationType = TrafficParticipantType_unknown; // TODO retrieve type from SUMO
 
     msg->denm.situation = vanetza::asn1::allocate<SituationContainer_t>();
     msg->denm.situation->informationQuality = 1;
-    msg->denm.situation->eventType.causeCode = CauseCodeType_trafficCondition;
-    msg->denm.situation->eventType.subCauseCode = 0;
+    msg->denm.situation->eventType.ccAndScc.present = CauseCodeChoice_PR_trafficCondition1;
+    msg->denm.situation->eventType.ccAndScc.choice.trafficCondition1 = TrafficConditionSubCauseCode_unavailable;
 
     // TODO set road type in Location container
     // TODO set lane position in Alacarte container
diff --git a/src/artery/application/den/UseCase.cc b/src/artery/application/den/UseCase.cc
index 1b3744fc..e4c6695f 100644
--- a/src/artery/application/den/UseCase.cc
+++ b/src/artery/application/den/UseCase.cc
@@ -5,6 +5,15 @@
 #include <boost/units/systems/si/prefixes.hpp>
 #include <omnetpp/checkandcast.h>
 
+#define SpeedValue_oneCentimeterPerSec 1
+#define Longitude_oneMicrodegreeEast 10
+#define Latitude_oneMicrodegreeNorth 10
+#define HeadingConfidence_equalOrWithinOneDegree 10
+#define SpeedConfidence_equalOrWithinOneCentimeterPerSec 1
+#define LongitudinalAccelerationValue_pointOneMeterPerSecSquaredForward 1
+#define YawRateValue_degSec_000_01ToLeft 1
+#define PathDeltaTime_tenMilliSecondsInPast 1
+
 namespace artery
 {
 namespace den
@@ -33,13 +42,13 @@ vanetza::asn1::Denm UseCase::createMessageSkeleton()
 {
     vanetza::asn1::Denm message;
     message->header.protocolVersion = 1;
-    message->header.messageID = ItsPduHeader__messageID_denm;
-    message->header.stationID = mVdp->station_id();
+    message->header.messageId = MessageId_denm;
+    message->header.stationId = mVdp->station_id();
 
     // Do not copy ActionID itself (it also contains a context object)
     auto action_id = mService->requestActionID();
-    message->denm.management.actionID.originatingStationID = action_id.originatingStationID;
-    message->denm.management.actionID.sequenceNumber = action_id.sequenceNumber;
+    message->denm.management.actionId.originatingStationId = action_id.originatingStationId;
+    message->denm.management.actionId.sequenceNumber = action_id.sequenceNumber;
     int ret = 0;
     const auto taiTime = countTaiMilliseconds(mService->getTimer()->getTimeFor(mVdp->updated()));
     ret += asn_long2INTEGER(&message->denm.management.detectionTime, taiTime);
@@ -57,12 +66,12 @@ vanetza::asn1::Denm UseCase::createMessageSkeleton()
     message->denm.location->eventSpeed = vanetza::asn1::allocate<Speed>();
     message->denm.location->eventSpeed->speedValue = std::abs(round(mVdp->speed(), centimeter_per_second)) * SpeedValue_oneCentimeterPerSec;
     message->denm.location->eventSpeed->speedConfidence = SpeedConfidence_equalOrWithinOneCentimeterPerSec * 3;
-    message->denm.location->eventPositionHeading = vanetza::asn1::allocate<Heading>();
-    message->denm.location->eventPositionHeading->headingValue = round(mVdp->heading(), decidegree);
-    message->denm.location->eventPositionHeading->headingConfidence = HeadingConfidence_equalOrWithinOneDegree;
+    message->denm.location->eventPositionHeading = vanetza::asn1::allocate<Wgs84Angle_t>();
+    message->denm.location->eventPositionHeading->value = round(mVdp->heading(), decidegree);
+    message->denm.location->eventPositionHeading->confidence = HeadingConfidence_equalOrWithinOneDegree;
 
     // TODO fill path history
-    auto path_history = vanetza::asn1::allocate<PathHistory_t>();
+    auto path_history = vanetza::asn1::allocate<Path_t>();
     asn_sequence_add(&message->denm.location->traces, path_history);
 
     return message;
diff --git a/src/artery/envmod/sensor/CamSensor.cc b/src/artery/envmod/sensor/CamSensor.cc
index 81cc40c4..64f4f6b2 100644
--- a/src/artery/envmod/sensor/CamSensor.cc
+++ b/src/artery/envmod/sensor/CamSensor.cc
@@ -45,7 +45,7 @@ void CamSensor::receiveSignal(cComponent*, simsignal_t signal, cObject *obj, cOb
     if (signal == CamReceivedSignal) {
         auto* cam = dynamic_cast<CaObject*>(obj);
         if (cam) {
-            uint32_t stationID = cam->asn1()->header.stationID;
+            uint32_t stationID = cam->asn1()->header.stationId;
             auto identity = mIdentityRegistry->lookup<IdentityRegistry::application>(stationID);
             if (identity) {
                 auto object = mGlobalEnvironmentModel->getObject(identity->traci);
